<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="tk.mybatis.simple.mapper.UserMapper">
	<resultMap type="tk.mybatis.simple.model.SysUser" id="userMap">
		<id property="id" column="id"/>
		<result property="userName" column="user_name"/>
		<result property="userPassword" column="user_password"/>
		<result property="userEmail" column="user_email"/>
		<result property="userInfo" column="user_info"/>
		<result property="headImg" column="head_img" jdbcType="BLOB"/>
		<result property="createTime" column="create_time" jdbcType="TIMESTAMP"/>
		<!-- 相关属性 -->
<!-- 		<result property="sysRole.id" column="role_id"/>
		<result property="sysRole.roleName" column="role_name"/>
		<result property="sysRole.enabled" column="enabled"/>
		<result property="sysRole.createBy" column="create_by"/>
		<result property="sysRole.createTime" column="role_create_time" jdbcType="TIMESTAMP"/> -->
	</resultMap>
	<!-- 继承userMap -->
	<resultMap type="tk.mybatis.simple.model.SysUser" id="userRoleMap" extends="userMap">
		<association property="sysRole" columnPrefix="sysRole_" javaType="tk.mybatis.simple.model.SysRole">
			<result property="id" column="role_id"/>
			<result property="roleName" column="role_name"/>
			<result property="enabled" column="enabled"/>
			<result property="createBy" column="create_by"/>
			<result property="createTime" column="create_time" jdbcType="TIMESTAMP"/>
		</association>
	</resultMap>
	
	<!-- 6.1.1.4 association标签的嵌套查询 -->
	<resultMap type="tk.mybatis.simple.model.SysUser" id="userRoleMapSelect" extends="userMap">
		<association property="role" column="{id=role_id}" select="tk.mybatis.mapper.RoleMapper.selectRoleById"/>
	</resultMap>
	
	<!-- 6.1.2.1 collection集合的嵌套结果映射 -->
	<resultMap type="tk.mybatis.simple.model.SysUser" id="userRoleListMap" extends="userMap">
		<id property="id" column="id"/>
		<result property="userName" column="user_name"/>
		<result property="userPassword" column="user_password"/>
		<result property="userEmail" column="user_email"/>
		<result property="userInfo" column="user_info"/>
		<result property="headImg" column="head_img" jdbcType="BLOB"/>
		<result property="createTime" column="create_time" jdbcType="TIMESTAMP"/>
 		<collection property="roleList" columnPrefix="role_" javaType="tk.mybatis.simple.model.SysRole">
			<id property="id" column="id"/>
			<result property="roleName" column="role_name"/>
			<result property="enabled" column="enabled"/>
			<result property="createBy" column="create_by"/>
			<result property="createTime" column="create_time" jdbcType="TIMESTAMP"/>
		</collection>
		<!-- <collection property="roleList" columnPrefix="role_" resultMap="tk.mybatis.simple.mapper.RoleMapper.roleMap"/> -->
	</resultMap>
	
	<resultMap type="tk.mybatis.simple.model.SysUser" id="userRoleListMapSelect" extends="userMap">
		<collection property="roleList"
					fetchType="lazy"
					select="tk.mybatis.simple.mapper.RoleMapper.selectRoleByUserId"
					column="{userId=id}"
		/>
	</resultMap>
	
	<select id="selectById" resultMap="userMap">
		select * from sys_user where id=#{id}
	</select>
	
	<select id="selectAll" resultType="tk.mybatis.simple.model.SysUser">
		select id,
			user_name,
			user_password,
			user_email,
			user_info,
			head_img,
			create_time
		from sys_user
	</select>
	
	<select id="selectRolesByUserId" resultType="tk.mybatis.simple.model.SysRole">
		select
			r.id,
			r.role_name,
			r.enabled,
			r.create_by,
			r.create_time,
			u.user_name as "user.userName",
			u.user_email as "user.userEmail"
		from sys_user u
		inner join sys_user_role ur on u.id=ur.user_id
		inner join sys_role r on ur.role_id=r.id
		where u.id=#{userId}
	</select>
	
	<!-- parameterType这个属性是可选的，因为MyBatis可以推断出传入语句的的具体参数，因此不建议配置该属性 -->
	<insert id="insert">
		insert into sys_user(
			id,user_name,user_password,user_email,user_info,head_img,create_time
		)values(
			#{id},#{userName},#{userPassword},#{userEmail},#{userInfo},
			#{headImg,jdbcType=BLOB},#{createTime,jdbcType=TIMESTAMP}
		)
	</insert>
	
	<!-- useGeneratedKeys设置为true后，MyBatis会使用JDBC的getGeneratedKeys方法来取出由数据库内部生成的主键
	。获得主键后会将其赋值给keyProperty配置的id属性 -->
	<insert id="insert2" useGeneratedKeys="true" keyProperty="id">
		insert into sys_user(
			user_name,user_password,
			<if test="userEmail!=null and userEmail!=''">
				user_eamil,
			</if>
			user_info,head_img,create_time
		)values(
			#{userName},#{userPassword},
			<if test="userEmail!=null and userEmail !=''">
				#{userEmail}
			</if>
			#{userInfo},#{headImg,jdbcType=BLOB},#{createTime,jdbcType=TIMESTAMP}
		)
	</insert>
	
	<!-- selectKey标签的keyColumn、keyProperty和上面userGeneratedKeys的用法含义相同，
	这里的resultType用于设置返回值类型。order属性的设置和使用的数据库有关，MySql中为AFTER,
	因为当前记录的主键值在insert语句执行成功后才能获取到，Oracle的为BEFORE，这是因为Oracle中需要先从序列获取值，
	然后将值作为主键插入到数据库中-->
	<insert id="insert3">
		insert into sys_user(
			user_name,user_password,user_email,user_info,head_img,create_time
		)values(
			#{userName},#{userPassword},#{userEmail},#{userInfo},
			#{headImg,jdbcType=BLOB},#{createTime,jdbcType=TIMESTAMP}
		)
		<selectKey keyColumn="id" resultType="long" keyProperty="id" order="AFTER">
			SELECT LAST_INSERT_ID()
		</selectKey>
	</insert>
	
	<update id="updateById">
		update sys_user
		set user_name=#{userName},
			user_password=#{userPassword},
			user_email=#{userMail},
			user_info=#{userInfo},
			user_img=#{headImg,jdbcType=BLOB},
			create_time=#{createTimejdbcType=ITEMSTAMP}
		where id=#{id}
	</update>
	
	<delete id="deleteById">
		delete form sys_user where id=#{id}
	</delete>
	
	<select id="selectRolesByUserIdAndRoleEnabled" resultType="tk.mybatis.simple.model.SysRole">
		select
			r.id,
			r.role_name,
			r.enabled,
			r.create_by,
			r.create_time
		from sys_user u
		inner join sys_user_role ur on u.id=ur.user_id
		inner join sys_role r on ur.role_id=r.id
		where u.id=#{userId} and r.enabled=#{enabled}
	</select>
	
	<select id="selectRolesByUserAndRole" resultType="tk.mybatis.simple.model.SysRole">
		select
			r.id,
			r.role_name,
			r.enabled,
			r.create_by,
			r.create_time
		from sys_user u
		inner join sys_user_role ur on u.id=ur.user_id
		inner join sys_role r on ur.role_id=r.id
		where u.id=#{user.id} and r.enabled=#{role.enabled}
	</select>
	
	<!-- 动态SQL -->
	<select id="selectByUser" resultType="tk.mybatis.simple.model.SysUser">
		select id,
			user_name,
			user_password,
			user_email,
			user_info,
			head_img,
			create_time
		from sys_user
		<where>
			<if test="userName!=null and userName!=''">
				<bind name="userNameLike" value="'%'+userName+'%'"/>
				and user_name like #{userNameLike}
			</if>
			<if test="userEmail!=null and userEmail!=''">
				and user_email =#{userEmail}
			</if>
		</where>
	</select>
	
	<update id="updateByIdSelective">
		update sys_user
		<set>
			<if test="userName!=null and userName!=''">
				user_name=#{userName},
			</if>
			<if test="userPassword != null and userPassword != ''">
				user_password = #{userPassword},
			</if>
			<if test="userEmail != null and userEmail != ''">
				user_email = #{userEmail},
			</if>
			<if test="userInfo != null and userInfo != ''">
				user_info = #{userInfo},
			</if>
			<if test="headImg != null">
				head_img = #{headImg, jdbcType=BLOB},
			</if>
			<if test="createTime != null">
				create_time = #{createTime, jdbcType=TIMESTAMP},
			</if>
			id = #{id},
		</set>
		where id = #{id}
	</update>
	
	<select id="selectByIdOrUserName" resultType="tk.mybatis.simple.model.SysUser">
		select id,
			user_name,
			user_email,
			user_info,
			user_password,
			head_img,
			create_time
		from sys_user
		where 1=1
		<choose>
			<when test="id!=null">
				and id=#{id}
			</when>
			<when test="userName!=null and userName!=''">
				and user_name=#{userName}
			</when>
			<otherwise>
				and 1=2
			</otherwise>
		</choose>
	</select>
	
	<!-- foreach中各个参数的用法请参考书籍中4.4章节 -->
	<select id="selectByIdList" resultType="tk.mybatis.simple.model.SysUser">
		select id,
			user_name,
			user_password,
			user_email,
			user_info,
			head_img,
			create_time
		from sys_user
		where id in
    	<foreach collection="list" open="(" close=")" separator="," item="id" index="i">
    		#{id}
    	</foreach>
	</select>
	
	<!-- 通过item指定了循环变量名后，在引用值的时候使用的是“属性.属性”的方式，如user.userName -->
	<insert id="insertList">
		insert into sys_user(
			user_name,user_password,user_email,user_info,head_img,create_time)
		values
		<foreach collection="list" item="user" separator=",">
			(
				#{user.userName},#{user.userPassword},#{user.userInfo},
				#{user.headImg},#{user.headImg,jdbcType=BLOB},
				#{user.createTime,jdbcType=TIMESTAMP}
			)
		</foreach>
	</insert>
	
	<!-- 具体可参考书本上4.4.3章节的介绍 -->
	<update id="updateByMap">
		update sys_user
		set
		<foreach collection="_parameter" item="val" index="key" separator=",">
			${key}=#{val}
		</foreach>
		where id=#{id}
	</update>
	
	<select id="selectUserAndRoleById" resultType="tk.mybatis.simple.model.SysUser">
		select 
			u.id,
			u.user_name,
			u.user_password,
			u.user_email,
			u.user_info,
			u.head_img,
			u.create_time,
			r.id "sysRole.id",
			r.role_name "sysRole.roleName",
			r.enabled "sysRole.enabled",
			r.create_by "sysRole.createBy",
			r.create_time "sysRole.createTime"
		from sys_user u
		inner join sys_user_role ur on u.id=ur.user_id
		inner join sys_role r on ur.role_id=r.id
		where u.id=#{id}
	</select>
	
	<select id="selectUserAndRoleById2" resultMap="userMap">
		select 
			u.id,
			u.user_name,
			u.user_password,
			u.user_email,
			u.user_info,
			u.head_img,
			u.create_time,
			r.id,
			r.role_name,
			r.enabled,
			r.create_by,
			r.create_time
		from sys_user u
		inner join sys_user_role ur on u.id=ur.user_id
		inner join sys_role r on ur.role_id=r.id
		where u.id=#{id}
	</select>
	
	<select id="selectUserAndRoleByIdSelect" resultMap="userRoleMapSelect">
		select
			u.id,
			u.user_name,
			u.user_password,
			u.user_email,
			u.uer_info,
			u.head_img,
			u.create_time,
			ur.role_id
		from sys_user u
		inner join sys_user_role ur on u.id=ur.user_id
		where u.id=#{id}
	</select>
	
	<select id="selectAllUserAndRoles" resultMap="userRoleListMap">
		select
			u.id,
			u.user_name,
			u.user_password,
			u.user_email,
			u.user_info,
			u.head_img,
			u.create_time,
			r.id,
			r.role_name,
			r.enabled,
			r.create_by,
			r.create_time,
			p.id,
			p.privilege_name,
			p.privilege_url
		from sys_user u
		inner join sys_user_role ur on u.id=ur.user_id
		inner join sys_role r on ur.role_id=r.id
		inner join sys_role_privilege rp on rp.role_id=r.id
		inner join sys_privilege p on p.id=rp.privilege_id
	</select>
	
	<select id="selectAllUserAndRolesSelect" resultMap="userRoleListMapSelect">
		select
			u.id,
			u.user_name,
			u.user_password,
			u.user_email,
			u.user_info,
			u.head_img,
			u.create_time
		from sys_user u
		where u.id=#{id}
	</select>
</mapper>